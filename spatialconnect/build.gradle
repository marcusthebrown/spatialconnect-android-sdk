apply plugin: 'com.android.library'
apply plugin: "com.jfrog.bintray"
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven'

group 'com.boundlessgeo.spatialconnect'
version '0.13.0'

ext {
    bintrayRepo = 'mobile'
    bintrayName = 'spatialconnect'

    publishedGroupId = 'com.boundlessgeo.spatialconnect'
    libraryName = 'spatialconnect'
    artifact = 'spatialconnect'

    libraryDescription = 'SpatialConnect is a collection of libraries that makes it easier ' +
            'for developers to write apps that connect to multiple spatial data stores online and offline.'

    siteUrl = 'https://github.com/boundlessgeo/spatialconnect-android-sdk'
    gitUrl = 'https://github.com/boundlessgeo/spatialconnect-android-sdk.git'

    libraryVersion = '0.13.0'

    developerId = 'boundlessgeo'
    developerName = 'Mobile Boundless'
    developerEmail = 'mobile@boundlessgeo.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

def isCi = "true".equals(System.getenv("CI"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "0.13.0"
        multiDexEnabled = true
        // http://developer.android.com/tools/building/multidex.html#testing
        testInstrumentationRunner "com.boundlessgeo.spatialconnect.test.MultiDexAndroidJUnitRunner"
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }
    uploadArchives {
        repositories {
            mavenDeployer {
                repository url: 'file://' + new File(System.getProperty('user.home'), '.m2/repository')
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    productFlavors {
    }
    sourceSets {
        main.jniLibs.srcDirs = ['libs']
    }
    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isCi
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.google.android.gms:play-services-maps:10.2.6'
    compile 'com.android.support:multidex:1.0.0'
    compile "com.bedatadriven:jackson-datatype-jts:2.2"
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'commons-io:commons-io:2.4'
    compile 'com.squareup.okhttp3:okhttp:3.3.1'
    compile 'com.google.protobuf:protobuf-java:3.0.0'
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.1.0'
    compile ('org.eclipse.paho:org.eclipse.paho.android.service:1.1.0') {
        exclude module: 'support-v4'
    }
    compile 'com.github.rtoshiro.securesharedpreferences:securesharedpreferences:1.2.0'
    compile 'com.github.pwittchen:reactivenetwork:0.5.2'
    compile('io.jeo:jeo:0.6') {
        exclude group: 'com.vividsolutions'
        exclude group: 'io.jeo', module: 'proj4j'
    }
    compile 'com.auth0:java-jwt:2.2.1'
    compile 'com.boundlessgeo:schema:0.12'

    // testing dependencies
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        version {
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password") //Optional. The passphrase for GPG signing'
            }
        }
    }
}


