package com.boundlessgeo.spatialconnect.stores;

import android.content.Context;
import android.database.Cursor;
import com.boundlessgeo.spatialconnect.config.SCStoreConfig;
import com.boundlessgeo.spatialconnect.db.GeoPackage;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import static junit.framework.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.powermock.api.mockito.PowerMockito.mockStatic;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ android.util.Base64.class })
public class GeoPackageStoreTest {

  @Test public void test_getBase64StringsForPhotos() {

    GeoPackageStore gpkgStore = new GeoPackageStore(mock(Context.class), mock(SCStoreConfig.class));
    GeoPackage gpkg = mock(GeoPackage.class);
    gpkgStore.gpkg = gpkg;

    Cursor cursor = mock(Cursor.class);
    when(cursor.moveToFirst()).thenReturn(Boolean.TRUE);
    // note b/c we are running the unit test outside of the android vm, we can use java.util
    // but since the actual method needs to use android.util.Base64 (and its static methods)
    // we need to use PowerMock to mock it
    mockStatic(android.util.Base64.class);
    when(android.util.Base64.encodeToString(any(byte[].class), anyInt())).thenReturn(
        java.util.Base64.getEncoder().encodeToString(GeoPackageStore.NO_IMAGE.getBytes()));

    when(cursor.getBlob(0)).thenReturn(GeoPackageStore.NO_IMAGE.getBytes());

    when(gpkg.query(anyString())).thenReturn(cursor);

    String base64Imgs = gpkgStore.getBase64StringsForPhotos("test_table_photos",
        "[\"https://un-exchange.boundlessgeo.io/api/fileservice/18F33E52-0441-412C-B91A-4BF9F5B3F9FC.jpg/view/\",\"https://un-exchange.boundlessgeo.io/api/fileservice/8D48D05D-31F9-4E09-826A-E56E9A2B765C.jpg/view/\",\"https://un-exchange.boundlessgeo.io/api/fileservice/26DCC290-0D8D-4FD2-8CC4-7BF2686E8A87.jpg/view/\"]");
    String expected =
        "[\"UjBsR09EZGh5QUNXQU9NQUFNek16SmFXbHNYRnhiNit2cU9qbzV5Y25MZTN0NnFxcXJHeHNRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ3dBQUFBQXlBQ1dBQUFFL2hESVNhdTlPT3ZOdS85Z0tJNWthWjVvcXE1czY3NXdMTTkwYmQ5NHJ1OTg3Ly9Bb0hCSUxCcVB5S1J5eVd3Nm45Q29kRXF0V3EvWXJIYkw3WHEvNExCNFRDNmJ6K2kwZXMxdXU5L3d1SHhPcjl2ditMeCt6Ky83LzRDQmdvT0VoWWFIaUltS2k0eU5qbytRa1pLVGxKV1dsNWlabXB1Y25aNmZvS0dpbzZTbHBxZW9xYXFycksydXI3Q3hzck8wdGJhM1RBTUZCUU80TEFVQkFRVytLOERDeENvR3U3M0l6U1VDd1FFQ0F3UUJCQUlWQ01BRkNCclJ4d0RRd1FMS3ZPSFYxeGJVd1FmWUV3SUh3TzNCQkJUYXd1MkJBOUhHd2NNVDFiN1Z3L0R0M3o1NjN4QUlySENRbnpzQUFmMEY2eWJod0Rkd2dBeDhPeERRZ0FTTi9zS1VCV05td1FESWZ3QkFUaFJvTVlESENSWUpHQWhJOGVSTWYrNE9GcmdaZ0NLZ2FCNFBIcWc0RW9CUWJ4Z0JST3Rsckp1NG9mWW0wSk1Ra0prL21PTWtUQTEwVmFzMUNjYWtKclhRMWV1L3NGNEhXaEIzTnBoWWxOc214T1dLc1d0WnRBU1Rkc1ZiMW1oRXUzVURYM1JMRnlWZ3VJVHpvbFFLamkvR2hnWE52aFU3T0lDZ3NvZmxKcjdRZDIvaXNnRVBHR0FydVRUam5TWlRYdzdjMXJKcHpub2JmMlk5R1lCanhJc0pZUWJYc3RmUkRKMWx1ejZ0MlREdm9zU0pTcE13NEdYRzNUdFQraFBwRW9QSjZSODlCN0FhVXJub2xnV3duVVFRRUtWT0F5MTk5bWxvblBEZnIzbS9HZVVIRmpCaEFmMFNVaDI4K1AxMlFPSUlnRGJjUGR3Z0pWK0FyZjBqbndUd3NIT1FUL0hzMUJjQUJPYmpEQWNUWGhpQ09HcHBLQUpJNm5uSXdRR2lLWlNWaUIyWXFCK0tIdHhqalhNc3hpampqRFRXYU9PTk9PYW80NDQ4OXVqamowQUdLZVNRUkJacDVKRklKcW5ra2t3MjZlU1RVRVlwNVpSVVZtbmxsVmhtcWVXV1hIYnA1WmRnaGlubW1HU1c2VXNFQURzPQ==\",\"UjBsR09EZGh5QUNXQU9NQUFNek16SmFXbHNYRnhiNit2cU9qbzV5Y25MZTN0NnFxcXJHeHNRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ3dBQUFBQXlBQ1dBQUFFL2hESVNhdTlPT3ZOdS85Z0tJNWthWjVvcXE1czY3NXdMTTkwYmQ5NHJ1OTg3Ly9Bb0hCSUxCcVB5S1J5eVd3Nm45Q29kRXF0V3EvWXJIYkw3WHEvNExCNFRDNmJ6K2kwZXMxdXU5L3d1SHhPcjl2ditMeCt6Ky83LzRDQmdvT0VoWWFIaUltS2k0eU5qbytRa1pLVGxKV1dsNWlabXB1Y25aNmZvS0dpbzZTbHBxZW9xYXFycksydXI3Q3hzck8wdGJhM1RBTUZCUU80TEFVQkFRVytLOERDeENvR3U3M0l6U1VDd1FFQ0F3UUJCQUlWQ01BRkNCclJ4d0RRd1FMS3ZPSFYxeGJVd1FmWUV3SUh3TzNCQkJUYXd1MkJBOUhHd2NNVDFiN1Z3L0R0M3o1NjN4QUlySENRbnpzQUFmMEY2eWJod0Rkd2dBeDhPeERRZ0FTTi9zS1VCV05td1FESWZ3QkFUaFJvTVlESENSWUpHQWhJOGVSTWYrNE9GcmdaZ0NLZ2FCNFBIcWc0RW9CUWJ4Z0JST3Rsckp1NG9mWW0wSk1Ra0prL21PTWtUQTEwVmFzMUNjYWtKclhRMWV1L3NGNEhXaEIzTnBoWWxOc214T1dLc1d0WnRBU1Rkc1ZiMW1oRXUzVURYM1JMRnlWZ3VJVHpvbFFLamkvR2hnWE52aFU3T0lDZ3NvZmxKcjdRZDIvaXNnRVBHR0FydVRUam5TWlRYdzdjMXJKcHpub2JmMlk5R1lCanhJc0pZUWJYc3RmUkRKMWx1ejZ0MlREdm9zU0pTcE13NEdYRzNUdFQraFBwRW9QSjZSODlCN0FhVXJub2xnV3duVVFRRUtWT0F5MTk5bWxvblBEZnIzbS9HZVVIRmpCaEFmMFNVaDI4K1AxMlFPSUlnRGJjUGR3Z0pWK0FyZjBqbndUd3NIT1FUL0hzMUJjQUJPYmpEQWNUWGhpQ09HcHBLQUpJNm5uSXdRR2lLWlNWaUIyWXFCK0tIdHhqalhNc3hpampqRFRXYU9PTk9PYW80NDQ4OXVqamowQUdLZVNRUkJacDVKRklKcW5ra2t3MjZlU1RVRVlwNVpSVVZtbmxsVmhtcWVXV1hIYnA1WmRnaGlubW1HU1c2VXNFQURzPQ==\",\"UjBsR09EZGh5QUNXQU9NQUFNek16SmFXbHNYRnhiNit2cU9qbzV5Y25MZTN0NnFxcXJHeHNRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ3dBQUFBQXlBQ1dBQUFFL2hESVNhdTlPT3ZOdS85Z0tJNWthWjVvcXE1czY3NXdMTTkwYmQ5NHJ1OTg3Ly9Bb0hCSUxCcVB5S1J5eVd3Nm45Q29kRXF0V3EvWXJIYkw3WHEvNExCNFRDNmJ6K2kwZXMxdXU5L3d1SHhPcjl2ditMeCt6Ky83LzRDQmdvT0VoWWFIaUltS2k0eU5qbytRa1pLVGxKV1dsNWlabXB1Y25aNmZvS0dpbzZTbHBxZW9xYXFycksydXI3Q3hzck8wdGJhM1RBTUZCUU80TEFVQkFRVytLOERDeENvR3U3M0l6U1VDd1FFQ0F3UUJCQUlWQ01BRkNCclJ4d0RRd1FMS3ZPSFYxeGJVd1FmWUV3SUh3TzNCQkJUYXd1MkJBOUhHd2NNVDFiN1Z3L0R0M3o1NjN4QUlySENRbnpzQUFmMEY2eWJod0Rkd2dBeDhPeERRZ0FTTi9zS1VCV05td1FESWZ3QkFUaFJvTVlESENSWUpHQWhJOGVSTWYrNE9GcmdaZ0NLZ2FCNFBIcWc0RW9CUWJ4Z0JST3Rsckp1NG9mWW0wSk1Ra0prL21PTWtUQTEwVmFzMUNjYWtKclhRMWV1L3NGNEhXaEIzTnBoWWxOc214T1dLc1d0WnRBU1Rkc1ZiMW1oRXUzVURYM1JMRnlWZ3VJVHpvbFFLamkvR2hnWE52aFU3T0lDZ3NvZmxKcjdRZDIvaXNnRVBHR0FydVRUam5TWlRYdzdjMXJKcHpub2JmMlk5R1lCanhJc0pZUWJYc3RmUkRKMWx1ejZ0MlREdm9zU0pTcE13NEdYRzNUdFQraFBwRW9QSjZSODlCN0FhVXJub2xnV3duVVFRRUtWT0F5MTk5bWxvblBEZnIzbS9HZVVIRmpCaEFmMFNVaDI4K1AxMlFPSUlnRGJjUGR3Z0pWK0FyZjBqbndUd3NIT1FUL0hzMUJjQUJPYmpEQWNUWGhpQ09HcHBLQUpJNm5uSXdRR2lLWlNWaUIyWXFCK0tIdHhqalhNc3hpampqRFRXYU9PTk9PYW80NDQ4OXVqamowQUdLZVNRUkJacDVKRklKcW5ra2t3MjZlU1RVRVlwNVpSVVZtbmxsVmhtcWVXV1hIYnA1WmRnaGlubW1HU1c2VXNFQURzPQ==\"]";
    assertEquals(expected, base64Imgs);
  }
}
